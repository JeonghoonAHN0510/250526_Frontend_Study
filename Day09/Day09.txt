[ JavsScript ]
    HTML : 웹문서 뼈대
    CSS  : 웹문서 디자인
    JS   : 웹문서 동적 움직임 ( 프로그래밍 언어 )
        1. 사용처 : 웹프로그래밍, 서버개발, 소프트웨어개발
        2. 라이브러리 종류
            1) React, Angular, Vue.js, JQuery
            2) Node.js : 2009년 이후 백엔드 역할 가능
            3) React Native : 앱개발(지원중단)
            4) React Native Web : 웹+앱개발
            5) Nw.js : 소프트웨어개발
            -> React, Next.js, Spring 트렌드상 많이 쓰임.
        3. 사용법
            - 주의할 점 : HTML 없이 JS 파일만으로 실행이 불가능하다.
            방법1)
                1. HTML 파일 내 <body> 마크업 안에서 가장 아래에
                2. <script> 마크업을 이용하여 JS코드를 작성한다.
            방법2) -> 주로 사용
                1. JS 파일을 생상하여 JS코드를 작성한다.
                2. HTML 파일 내 <body> 마크업 안에서 가장 아래에
                3. <script src="JS파일경로"></script>
        4. 주석
            - HTML : <!-- 주석 내용 -->
            - CSS : /* 주석 내용 */
            - JS
                1. /* 여러 줄 주석 내용 */
                2. // 한 줄 주석 내용
        5. 스타일 가이드
            1) 들여쓰기 하기*
            2) 세미콜론(;)으로 문장 구분하기
            3) 공백을 넣어 읽기 쉽게 작성하기
            4) 코드를 잘 설명하는 주석 작성하기
            5) 식별자 작성 규칙 지키기
                - 예약어는 사용할 수 없음
                - 영어, _, 숫자를 사용
                - 영어 대소문자 구분
                - 여러 단어를 연결할 경우, Camel Case를 사용하여 작성
                - 변수 이름은 의미 있게 작성

[ JS 실행 확인 ]
- 브라우저에서 F12(개발자 도구)
    -> sources 탭에서 .js 파일 여부 확인
    -> console 탭에서 .js 출력 메시지 확인

[ JS 기본 필수 용어 ]
    1. Data : 사실이나 값을 그대로 나타낸 객관적인 자료
    2. Literal : 프로그래밍언어(JS/JAVA/PYTHON)에서 소스코드에 직접 표현한 값
        -> Literal이 왜 필요한가? 컴퓨터는 0/1(2진수) 밖에 모른다.
        -> 그래서 프로그래밍언어 회사는 0/1로 조합한 미리 만들어진 단어가 필요하다.
        -> 개발자가 사용할 수 있도록 미리 정해진 값들을 넣어뒀다. (상수 = 수정할 수 없는 고정값)
        -> 프로그래밍언어 회사에서 종류를 정한다. ( 자료의 종류(자료형) )
    3. Data Type(자료형) : 프로그래밍언어에서 자료들을 분류하는 방법
        -> 왜? 데이터를 처리하는데 효율적으로 하기 위해서
        -> 각 프로그래밍언어들마다 다르다.

[ JS 자료형 ]
    1. 숫자형 ( Number ) : 10(정수), 3.14(실수)
    2. 문자열 ( String ) : " " 또는 ' '로 감싼 자료
    3. 논리형 ( Boolean ) : true, false
    4. 배열 ( Array ) : [ ]로 감싼 자료들 -> [] 안에 ,로 구분하여 여러 자료들을 감싼 자료
    5. 객체 ( Object ) : { 속성명: 자료, 속성명: 자료 } -> {} 안에 ,로 구분하여 이름과 값이 한 쌍을 이루는 자료
    6. 특수 ( undefined, null )
        undefined : 자료가 할당되지 않은 상태
        null : 자료가 존재하지 않는 상태

[ 10, 'A', "사과", 3.14 ]
    1. 위 코드에서 자료는 몇 개?        5개(10, 'A', 사과, 3.14, [])
[ {이름 : "김현수"}, 'A', 3.14 ]
    1. 위 코드에서 자료는 몇 개?        5개(김현수, {}, 사과, 3.14, [])
    2. 위 코드에서 리터럴은 몇 개?      3개({이름 : "김현수"}, 'A', 3.14)

- 미리 정해진 기능이 포함된 특수문자/문자열 : 키워드 검색
    [], {}, console, Number, String, if, for 등등   

[ 예시 ]
- 10                                    : '10'이라는 리터럴 값이면서 숫자 자료형
- 3.14                                  : '3.14'라는 리터럴 값이면서 숫자 자료형
- "안녕하세요"                          : '안녕하세요'라는 리터럴 값이면서 문자열 자료형
- true                                  : 'true'라는 리터럴 값이면서 논리 자료형
- [ 10, 3.14, "안녕하세요", true ]      : [ ] 안에 여러 개의 리터럴 값을 포함하는 배열 자료형

[ 출력 함수 ]
1. console.log( 출력할 자료 );
    - F12 - console에 출력된다.
2. alert( 출력할 자료 );
    - 브라우저 알림창으로 출력된다.
3. document.write( HTML );
    - HTML 문서에 출력된다.
4. document.querySelector("선택자").innerHTML = HTML;
    - 특정한 선택자(마크업, class, id)를 출력한다.

[ 입력 함수 ]
1. confirm();
    - 브라우저에 확인/취소 알림창
    - 확인 = true / 취소 = false
2. prompt();
    - 브라우저에 텍스트 입력 알림창
    - 텍스트 입력상자에 입력한 텍스트를 반환
3. document.querySelector("선택자").innerHTML;
    - HTML에 작성된 특정한 선택자의 텍스트 호출
4. document.querySelector("선택자").value;
    - HTML에 작성된 특정한 선택자의 value 속성의 값 호출

[ 변수와 입력/출력 함수 ] : 입력받은 결과물을 변수에 저장
1. let 변수명 = confirm();
    EX) let result1 = confirm("확인 또는 취소를 클릭하세요.");
            - confirm("확인 또는 취소를 클릭하세요.") : 브라우저에서 확인/취소를 선택받는다.
            - let result1 = : 확인(true)/취소(false)가 result1에 저장된다.
2. let 변수명 = prompt();
    EX) let result2 = prompt("사용자의 전화번호를 입력하세요.")
            - prompt("사용자의 전화번호를 입력하세요.") : 브라우저에서 텍스트를 입력받는다.
            - let result2 = : 입력한 텍스트가 result2에 저장된다.

[ 변수 ]
1. 정의 : 하나의 자료를 담아두는 공간(메모리)
2. 목적 : 재사용성, 가독성
3. 사용법
    1) 초기값이 없는 상태
        let 변수명;
    2) 초기값이 있는 상태
        let 변수명 = 값;
4. 형태
    1) let          : 변수를 선언하기 위한 명령어
    2) 변수명       : 메모리의 고유한 이름
    3) 값           : 변수에 저장할 자료
5. 낙타 표기법(Camel Case)
    mycar           -> myCar
    studentscore    -> studentScore
[ 변수 예시 ]
    let width;                          // 'width'라는 변수 선언
    let height;                         // 'height'라는 변수 선언
    width = 200;                        // 변수에 값을 대입
    height = 50;                        // 변수에 값을 대입
    let area = width * height;          // 변수 선언과 동시에 계산 결과를 대입
    console.log( area );                // area를 콘솔에 출력 *문자열 처리("")하면 안되고, 변수명 그대로 입력
    width = 300;                        // 변숫값 수정 가능

[ 상수 ]
1. 정의 : 하나의 자료를 담아두는 공간(메모리)이면서 수정이 불가능한 변수.
2. 목적 : 절댓값, 협업(협업할 때, 다른 사람이 수정 불가능하게 만듦)
3. 사용법
    const 변수명 = 초깃값               // 상수는 무조건 초깃값이 필요함.
4. 형태
    1) const        : 상수를 선언하기 위한 명령어
    2) 변수명       : 메모리의 고유한 이름
    3) 초깃값       : 상수에 저장할 자료
[ 상수 예시 ]
    const name1 = "안정훈"              // name1이라는 상수 선언
    console.log(name1)                  // 상수 호출
    name1 = "박재형"                    // 상수 수정 불가능 -> 오류발생(Assignment to constant variable.)

[ 생각해보기 ]
let point1 = 50                         // 변수명 : point1, 리터럴 : 50
let point2 = 100                        // 변수명 : point2, 리터럴 : 100
let point3 = point1 + point2            // 변수명 : point3, 리터럴 : 150
    // 위 코드에서 총 리터럴 개수? 3개(50, 100, 150)
    // 새로운 리터럴3 = 리터럴1 + 리터럴2
    // 연산 : 계산을 통해 '하나'의 결과를 도출하는 행위
let point4 = 50
    // 위 코드에서 총 리터럴 개수? 3개(50, 100, 150)
    // 50이 2개라고 리터럴 개수가 늘어나진않음.