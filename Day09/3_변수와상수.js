/*
[ 변수 ]
    1. 정의 : 하나의 자료를 담아두는 공간(메모리)
    2. 목적 : 재사용성, 가독성
    3. 사용법
        1) 초기값이 없음
            let 변수명
        2) 초기값이 있음
            let 변수명 = 값
    4. 형태
        1) let              : 변수를 선언하기 위한 명령어
        2) 변수명           : 메모리의 고유한 이름
        3) 값               : 변수에 저장할 자료
    5. 낙타 표기법(Camel Case)
        mycar -> myCar
        studentscore -> studentScore

*/

let width                              // 'width'라는 변수 선언한다.
let height                             // 'height'라는 변수 선언한다.

width = 200                            // 변수에 값을 대입한다.
height = 50                            // 변수에 값을 대입한다.

let area = width * height              // 변수 선언과 동시에 계산 결과 대입한다.
console.log(area)                      // 넓이를 콘솔에 출력

// 1. 변수 선언 방법                   // let 변수명
let 이름1                              // 초깃값이 있는 변수 선언
let 이름2 = "유재석"                   // 초깃값이 없는 변수 선언
// 2. 변수 호출 방법                   // 주의할 점 : 문자열 처리("")하면 안되고, 변수명을 그대로 출력.
console.log(이름1)                     // undefined(변수 선언은 되었지만, 값이 할당되지 않은 상태)
console.log(이름2)                     // 이름2 라는 변수가 가지는 변숫값을 출력.
// 3. 변숫값 수정 방법                 // 변수명 = 새로운 값
이름1 = "강호동"
이름2 = "박명수"
console.log(이름1)
console.log(이름2)

/*
[ 상수 ]
    1. 정의 : 하나의 자료를 담아두는 공간(메모리)이면서 수정이 불가능한 변수.
    2. 목적 : 절댓값, 협업
    3. 사용법
        const 변수명 = 초깃값          // 상수는 무조건 초깃값이 필요
    4. 형태
        1) const        : 상수를 선언하기 위한 명령어
        2) 변수명       : 메모리의 고유한 이름(대체로 전체 대문자) pi -> PI
        3) 값           : 상수(고정)로 저장할 자료
*/
// 1. 상수 선언 방법
const 이름3 = "신동엽"
// 2. 상수 호출 방법
console.log(이름3)
// 3. 상숫값 수정 방법 -> 불가능
이름3 = "정형돈"                       // 오류발생(Assignment to constant variable.)

// [ 생각해보기 ]
let point1 = 50                 // 변수명 : point1, 리터럴 : 50
let point2 = 100                // 변수명 : point2, 리터럴 : 100
let point3 = point1 + point2    // 변수명 : point3, 리터럴 : 150
    // 위 코드에서 총 리터럴 개수? 3개
    // 리터럴1 + 리터럴2 = 새로운 리터럴3
    // 연산 : 계산을 통해 '하나'의 결과를 도출하는 행위
let point4 = 50
    // 위 코드에서 총 리터럴 개수? 3개(50, 100, 150)
    // 50이 2개라고 리터럴 개수가 늘어나진않음.