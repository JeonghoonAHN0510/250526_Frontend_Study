[ flex ] - 하위 요소들의 배치 방밥
    1. flex-wrap
        1. nowrap(기본값)       : 하위 요소들의 크기가 더 크면 자동으로 크기 맞춤
        2. wrap                 : 하위 요소들의 크기가 더 크면 자동으로 줄 바꿈
    2. flex-direction
        1. row(기본값)          : 하위 요소들의 가로 방향 배치
        2. column               : 하위 요소들의 세로 방향 배치
    3. justify-content : 가로 정렬
        1. flex-start(기본값)   : 좌측 정렬
        2. flex-end             : 우측 정렬
        3. center               : 가로 가운데 정렬
        4. space-between        : 양쪽 여백 끝에 여백없이 사이여백 균등 정렬
        5. space-around         : 양쪽 여백 끝에 사이여백 50%하고 사이여백 균등 정렬
        6. space-evenly         : 양쪽 여백과 사이여백 균등 정렬
    4. align-items : 세로 정렬
        1. stretch(기본값)      : 하위 요소의 세로 크기가 고정이 아니라면, 자동으로 부모 세로 크기만큼 늘어남
        2. center               : 세로 가운데 정렬
        3. flex-start           : 상단 정렬
        4. flex-end             : 하단 정렬

- 클래스를 지정할 때, 중복되는 것을 방지하기 위해서
1. 클래스명을 겹치지않게 지정하기.
2. CSS에서 상위 클래스부터 지정해서 정확하게 클래스명 지목하기.


[ Github ] - VCS(Version Control System)
    - 분산 버전 관리 툴을 제공하는 웹 서비스
    1. 웹 서비스에서 코드들을 저장하는 코드 저장소
    2. 다양한 기업들이 사용하는 협업 플랫폼

[ Github 이용방법 ]
- VSCode와 Github 최초 연동 (PC당 1번)
1. VSCode(소스제어) : Windows용 GIT 다운로드
2. Git for Windows/x64 Setup. 다운로드 후 실행
3. 설치 완료 후 VSCode 재실행
4. 'Github에 게시' -> 로그인
5. publish to github public repository
6. 등록자 등록하기.
7. [메시지]에 업로드할 때 기록할 메모 작성 -> [ 커밋 및 푸시 ]
8. 우측 하단 [ 원격 추가 ] 클릭 -> main(원격 추가)


- 코드를 올리는 등록자 등록 (자리 바뀔때마다 해야함.)
1. [터미널] -> [새 터미널]
2. 터미널 상단 [+] [v] 클릭 후 [ git bash ] ( github 전용 터미널 )
3. git config --global user.name [name 확인]
4. git config --global user.email [email 확인]
5. git config --global user.name JeonghoonAHN0510 [name 설정]
6. git config --global user.email Jeonghoonahn0510@gmail.com [email 설정]


[ 주요 용어 ]
1. repository : 저장소 (코드들을 저장하는 하나의 저장소)(주로 프로젝트 단위)
2. commit : 코드 수정 완료(로컬 pc 기준)
3. push : 로컬 코드를 깃허브에 반영

- 캔바할 때 항상 제목의 위치나 폰트, 레이아웃 신경써서 만들기.